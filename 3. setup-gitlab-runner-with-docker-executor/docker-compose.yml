version: '3.8'
services:

  gitlab-server:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab-server
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://localhost:8088'
        nginx['listen_port'] = 8088
        gitlab_rails['initial_root_password'] = 'Abcd@0123456789'
        puma['worker_processes'] = 0 # disable cluster mode to avoid more memory usage
    volumes:
      - ./gitlab/config:/etc/gitlab
      - ./gitlab/logs:/var/log/gitlab
      - ./gitlab/data:/var/opt/gitlab
    ports:
      - '8088:8088'

  gitlab-runner:
    image: gitlab/gitlab-runner:alpine
    container_name: gitlab-runner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

      # When you install docker in a machine. Two diffrent programs come in:
      # 1. Docker Client
      # 2. Docker Server

      # Docker Server recieves commands over a socket (either over a network or through a "file")
      # Docker Client communicates over a network and sends message to the Docker server to say make a container, start a container, stop a container etc.

      # When the client and server are running on the same computer, they can connect through a special file called a socket. And since they can communicate through a file and Docker can efficiently share files between hosts and containers, it means you can run the client inside Docker itself.
      # The Docker daemon can listen for Docker Engine API requests via 
      # three different types of Socket: unix, tcp, and fd.
      # By default, a unix domain socket (or IPC socket) is created at /var/run/docker.sock
      
      # since we need to mount docker.sock from our host machine into gitlab-runner
      # so when we want to execute a job using docker, gitlab-runner can create a container on our
      # host machine using this docker.sock file, run the job and then terminate once the job is done    
    network_mode: 'host'
